#include "libinfra.h"

void BTCheck(int conn)
{
 if(!BluetoothStatus(conn)==NO_ERR)
 {
  TextOut(5,LCD_LINE2,"Error");
  Wait(1000);
  Stop(true);
 }
}

message splitMsg(string in)
{
 message tmp;
 ArrayInit(tmp.msg.param,0,10);
 
 tmp.typ = SubStr(in,0,1);
 tmp.id = StrToNum(SubStr(in,2,1));
 tmp.msg.funktion = StrIndex(in,4);
 //TODO param auslesen
 return tmp;
}

void lcd_print(string msg){
  if(lcd<0){lcd = 7; TextOut(0,0,"\0",DRAW_OPT_CLEAR_WHOLE_SCREEN);}
  TextOut(0,lcd--*8,msg);
}

void queueInit(payload &queue[]){
	int i;
	init0.funktion = '0';
	init1.funktion = '0';
	init2.funktion = '0';
	init3.funktion = '0';
	init4.funktion = '0';
	init5.funktion = '0';
	init6.funktion = '0';
	init7.funktion = '0';
	init8.funktion = '0';
	init9.funktion = '0';
	for(i=0;i<10;++i){init0.param[i]=0;}
	for(i=0;i<10;++i){init1.param[i]=0;}
	for(i=0;i<10;++i){init2.param[i]=0;}
	for(i=0;i<10;++i){init3.param[i]=0;}
	for(i=0;i<10;++i){init4.param[i]=0;}
	for(i=0;i<10;++i){init5.param[i]=0;}
	for(i=0;i<10;++i){init6.param[i]=0;}
	for(i=0;i<10;++i){init7.param[i]=0;}
	for(i=0;i<10;++i){init8.param[i]=0;}
	for(i=0;i<10;++i){init9.param[i]=0;}
	queue[0]=init0;
	queue[1]=init1;
	queue[2]=init2;
	queue[3]=init3;
	queue[4]=init4;
	queue[5]=init5;
	queue[6]=init6;
	queue[7]=init7;
	queue[8]=init8;
	queue[9]=init9;
}

payload dequeue(payload &queue[]){
 payload tmp;
 Acquire(queue_mutex);
  --msg_count;
  tmp = queue[aus_index];
  aus_index++;
  aus_index %= 10;
 Release(queue_mutex);
 return tmp;
}

void enqueue(payload &queue[], payload elem){
 Acquire(queue_mutex);
  ++msg_count;
  queue[ein_index].funktion = elem.funktion;
  int i;
  for(i=0;i<10;++i){queue[ein_index].param[i]=elem.param[i];}
  ein_index++;
  ein_index %= 10;
 Release(queue_mutex);
}

bool is_empty(){
 return msg_count <= 0;
}


string CharToStr(char c){
switch(c){
case 'a': return "a\0"; break;
case 'b': return "b\0"; break;
case 'c': return "c\0"; break;
case 'd': return "d\0"; break;
case 'e': return "e\0"; break;
case 'f': return "f\0"; break;
case 'g': return "g\0"; break;
case 'h': return "h\0"; break;
case 'i': return "i\0"; break;
case 'j': return "j\0"; break;
case 'k': return "k\0"; break;
case 'l': return "l\0"; break;
case 'm': return "m\0"; break;
case 'n': return "n\0"; break;
case 'o': return "o\0"; break;
case 'p': return "p\0"; break;
case 'q': return "q\0"; break;
case 'r': return "r\0"; break;
case 's': return "s\0"; break;
case 't': return "t\0"; break;
case 'u': return "u\0"; break;
case 'v': return "v\0"; break;
case 'w': return "w\0"; break;
case 'x': return "x\0"; break;
case 'y': return "y\0"; break;
case 'z': return "z\0"; break;
default: return "\0";
}
}
