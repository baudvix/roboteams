#include "explorer.h"
#include "libmov.h"
#include "libinfra.h"
#include "libmov.nxc" //noetig da kein linking
#include "libinfra.nxc" //noetig da kein linking

mutex print_mutex;
mutex blue_mutex;

#define DEBUG 3

task event(){
 #if DEBUG == 1
 Acquire(print_mutex);
 lcd_print("sen_event gestartet");//DEBUGINFO
 Release(print_mutex);
 #endif
}
 
task movement(){
 #if DEBUG == 1
 Acquire(print_mutex);
 lcd_print("movement gestartet");//DEBUGINFO
 Release(print_mutex);
 #endif
 payload dequeued;
 string streckeninfo;
 int strecke;
 int id=10;
 while(true){
  strecke=0;
  streckeninfo="";
  if(!is_empty()){
   dequeued = dequeue(queue1, queue2);
   if(dequeued.funktion == 0){
    Acquire(print_mutex);
     lcd_print("ERROR dequeue()");
    Release(print_mutex);
   }
   #if DEBUG == 3
   Acquire(print_mutex);
     lcd_print(StrCat("dequeue=",NumToStr(dequeued.funktion)));
     lcd_print(StrCat(" param=",NumToStr(dequeued.param)));
   Release(print_mutex);
   #endif
   if(dequeued.funktion == 1){
		weiter = 1; 
		strecke = vor(0);
    /*Acquire(blue_mutex);
    streckeninfo=StrCat("m;",NumToStr(id++),";s,",NumToStr(strecke));
    id %= 10;
    id += 10;
    SendResponseString(OUTBOX,streckeninfo);
    Release(blue_mutex);*/
   }
   else if(dequeued.funktion == 2){zurueck(1);}
   else if(dequeued.funktion == 3){drehen('l',90);}
   else if(dequeued.funktion == 4){drehen('r',90);}
   else{
     Acquire(print_mutex);
      lcd_print("M_PARSING-ERROR: ");
      lcd_print(StrCat("dequeue=",NumToStr(dequeued.funktion)));
      lcd_print(StrCat(" param=",NumToStr(dequeued.param)));
     Release(print_mutex);
   }
  }else{
   #if DEBUG == 2
   Acquire(print_mutex);
    lcd_print("queue is empty");//DEBUGINFO
   Release(print_mutex);
   #endif
   Wait(500);
  }
 }
}

task dispatcher()
{
 #if DEBUG == 1
 Acquire(print_mutex);
 lcd_print("dispatcher gestartet");//DEBUGINFO
 Release(print_mutex);
 #endif
 string in, tmp;
 message m;
 int test;
 while(true)
 {
  in = "";
  test = 1;
  Acquire(blue_mutex);
  test = ReceiveRemoteString(INBOX, true, in);//gibt 0 oder 64 zurueck
  Release(blue_mutex);
  if(in!="" && test==0)
  {
   #if DEBUG == 2
   Acquire(print_mutex);
    lcd_print("in != \"\" ");
   Release(print_mutex);
   #endif
   m = splitMsg(in);
   #if DEBUG == 2
   Acquire(print_mutex);
    lcd_print(StrCat("typ=",m.typ,";id=",NumToStr(m.id),";func=",NumToStr(m.msg.funktion)));
   Release(print_mutex);
   #endif
   if(m.typ == "m")/*strncmp(m.typ,"m",1) funktioniert nicht*/
   {
    tmp = StrCat("r;", NumToStr(m.id),";response");
    #if DEBUG == 2
    Acquire(print_mutex);
     lcd_print(tmp);
    Release(print_mutex);
    #endif
    Acquire(blue_mutex);
    SendResponseString(OUTBOX,tmp);
    Release(blue_mutex);
    enqueue(queue1, queue2, m.msg);
   }else if(m.typ == "a"){
    //id-fertig
   }else if(m.typ == "r"){
    tmp = StrCat("a;", NumToStr(m.id),";ack");
    #if DEBUG == 2
    Acquire(print_mutex);
     lcd_print(tmp);
    Release(print_mutex);
    #endif
    Acquire(blue_mutex);
    SendResponseString(OUTBOX,tmp);
    Release(blue_mutex);
   }
  }
  Wait(500);
 }
}


task main()
{
 Precedes(dispatcher, movement, event);

 queueInit(queue1, queue2); 
 //Init Sensoren:
 SetSensorTouch(S1);
 SetSensorTouch(S2);
 SetSensorTouch(S3);

}
