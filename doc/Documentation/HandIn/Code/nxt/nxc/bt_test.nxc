//SLAVE
#define BT_CONN 1
#define INBOX 5
#define OUTBOX 1

#define MOTOR_POWER 50
#define TEPPICH_ABWEICHUNG = 0.2

//forward declaration
int vor(void);
void zurueck(int umdrehungen);
void drehen(char richtung, int winkel);


 string typ;
 string msg;
 int id;
 int lcd = 7;
 int weiter;

void BTCheck(int conn) // läuft :)
{
 if(!BluetoothStatus(conn)==NO_ERR)
 {
  TextOut(5,LCD_LINE2,"Error");
  Wait(1000);
  Stop(true);
 }
}

void splitMsg(string in)
{
 int m_len = StrLen(in)-4;
 typ = SubStr(in,0,1);
 id = StrToNum(SubStr(in,2,1));
 msg = RightStr(in, m_len);
}

void lcd_print(string msg){
 if(lcd<0){lcd = 7; TextOut(0,0,"",DRAW_OPT_CLEAR_WHOLE_SCREEN);}
 TextOut(0,lcd--*8,msg);
}

void checkInbox()
{
 string in, tmp;
 byte payload[];
 int letzte = -1; 
 int aktuell = -1;
 while(true)
 {
  ReceiveRemoteString(INBOX, true, in);
  if(StrLen (in) != 0)
  {
   splitMsg(in);
   lcd_print(StrCat(typ, ";", NumToStr(id), ";", msg));
   aktuell = id;
   if(typ == "m" && aktuell > letzte)
   {
    tmp = StrCat("r;", NumToStr(id),";response");
    lcd_print(tmp);
    SendResponseString(OUTBOX,tmp);
    StrToByteArray(msg, payload);
    letzte = id;
    switch(payload[0]){
    case 'w': weiter = 1; vor(); break;
    case 's': zurueck(1); break;
    case 'a': drehen('l',90); break;
    case 'd': drehen('r',90); break;
    }
   }
   else if(typ == "m"){
    tmp = StrCat("r;", NumToStr(id),";response");
    SendResponseString(OUTBOX,tmp);
   }
   if(typ == "a"){
    //freude
   }
  }
 }
}

int vor(){
 Off(OUT_AB);
 while(weiter){
  SetOutput(OUT_AB,Power, MOTOR_POWER,TachoLimit, 3600,RegMode, OUT_REGMODE_SYNC,RunState, OUT_RUNSTATE_RUNNING,OutputMode, 7,UpdateFlags, 7); 
  while((MotorRunState(OUT_B) == OUT_RUNSTATE_RUNNING) && (SENSOR_1 < 1) && (SENSOR_2 < 1) && (SENSOR_3 < 1));
  if(!((SENSOR_1 < 1) && (SENSOR_2 < 1) && (SENSOR_3 < 1))){weiter = 0;}
 }
 Off(OUT_AB);
 return MotorTachoCount(OUT_A);
}

void drehen(char richtung, int winkel){
 Off(OUT_AB);
 int lr; //links oder rechts
 switch(richtung){
 case 'l': lr = 100; break;
 case 'r': lr = -100; break;
 default: lr = 100;
 }
 RotateMotorEx(OUT_AB, MOTOR_POWER, 2*winkel+TEPPICH_ABWEICHUNG, lr, true/*=sync*/, true/*=bremsen*/);
 Off(OUT_AB);
}

void zurueck(int umdrehungen){
 RotateMotorEx(OUT_AB, MOTOR_POWER, -360*umdrehungen, 0, true/*=sync*/, true/*=bremsen*/);
 Off(OUT_AB);
}

void test_vor(){
 NumOut(0, LCD_LINE1, vor());
 zurueck(1);
}

void test_drehen(){
 drehen('l',30);
 lcd_print("Das war 30");
 Wait(4000);
 drehen('l',60);
 lcd_print("Das war 60");
 Wait(4000);
 drehen('r',90);
 lcd_print("Das war 90");
 Wait(4000);
 drehen('l',120);
 lcd_print("Das war 120");
 Wait(4000);
 drehen('r',150);
 lcd_print("Das war 150");
 Wait(4000);
}

task movement(){

}

task main()
{
 //Init Sensoren:
 SetSensorTouch(S1);
 SetSensorTouch(S2);
 SetSensorTouch(S3);
 //test_vor();
 //BTCheck(0); //check master connection
 //checkInbox();
}
